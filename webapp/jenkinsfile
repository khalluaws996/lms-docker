pipeline {
    agent any

    environment {
        repositoryURL = "http://54.172.190.173:8081/repository/lms/"
        downloadDirectory = "/tmp" // Specify a different directory for artifact download
        deploymentLocation = "/home/ubuntu/lms" // Specify the deployment location
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                deleteDir()
            }
        }
        
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build LMS') {
            steps {
                echo 'Building LMS...'
                sh '''
                   cd webapp
                   npm install
                   npm run build
                '''
            }
        }

        stage('Publish Artifacts') {
            steps {
                script {
                    echo "Publishing artifacts"
                    
                    // Read the version from package.json
                    def packageJSON = readJSON file: 'webapp/package.json'
                    def packageJSONVersion = packageJSON.version 
                    
                    // Create a zip file of the dist directory
                    def zipFileName = "dist-${packageJSONVersion}.zip"
                    sh "cd webapp && zip -r ${zipFileName} dist/*"
                    
                    // Upload the zip file to the repository
                    def curlCommand = "curl -v -u admin:admin123 --upload-file webapp/${zipFileName} ${repositoryURL}${zipFileName}"
                    
                    // Retry mechanism
                    def maxRetries = 6
                    def retryCount = 0
                    def success = false

                    while (retryCount < maxRetries && !success) {
                        try {
                            sh curlCommand
                            success = true
                        } catch (Exception e) {
                            echo "Upload attempt ${retryCount + 1} failed. Retrying..."
                            echo "Error: ${e.getMessage()}"
                            retryCount++
                            sleep(time: 10, unit: 'SECONDS') // Wait before retrying
                        }
                    }

                    if (!success) {
                        error("Failed to upload the artifact after ${maxRetries} attempts")
                    }
                }
            }
        }

        stage('Download Artifact') {
            steps {
                echo 'Downloading artifact...'
                script {
                    try {
                        sh "wget ${repositoryURL}dist-${packageJSONVersion}.zip -P ${downloadDirectory}"
                    } catch (Exception e) {
                        echo "Download failed: ${e.getMessage()}"
                        error("Artifact download failed")
                    }
                }
            }
        }
        
        stage('Deploy LMS') {
            steps {
                echo 'Deploying LMS...'
                script {
                    try {
                        sh "unzip ${downloadDirectory}/dist-${packageJSONVersion}.zip -d ${deploymentLocation}"
                        sh "${deploymentLocation}/start.sh"
                    } catch (Exception e) {
                        echo "Deployment failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up any temporary files or resources if needed
            cleanWs()
        }
    }
}
