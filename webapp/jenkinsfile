import groovy.json.JsonSlurper

pipeline {
    agent any

    tools {
        nodejs 'NodeJS_Latest' // Ensure this matches the name of your NodeJS installation in Jenkins
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                deleteDir() // Clean up the workspace before starting
            }
        }
        
        stage('Checkout Code') {
            steps {
                checkout scm // Check out the code from the repository
            }
        }

        stage('Verify Directory Structure') {
            steps {
                script {
                    echo 'Verifying directory structure...'
                    sh 'ls -l' // List contents of the workspace root
                }
            }
        }

        stage('Build Lms') {
            steps {
                script {
                    echo 'Lms Build'
                    sh '''
                       set -e
                       echo "Current directory: $(pwd)"
                       echo "Listing contents:"
                       ls -l
                       echo "Changing to webapp directory..."
                       cd webapp || exit 1
                       echo "Installing npm packages..."
                       npm install
                       echo "Running npm build..."
                       npm run build
                    '''
                }
            }
        }

        stage('Publish Artifacts') {
            steps {
                script {
                    echo "Publishing artifacts"
                    
                    // Read the version from package.json
                    def packageJSONText = readFile 'webapp/package.json'
                    def packageJSONVersion = new JsonSlurper().parseText(packageJSONText).version 
                    
                    // Debugging steps to check the contents and availability of commands
                    sh '''
                       set -e
                       echo "Listing contents of webapp/dist:"
                       ls -l webapp/dist
                       echo "Checking for zip command:"
                       which zip
                    '''
                    
                    // Create a zip file of the dist directory
                    sh "zip -r webapp/dist-${packageJSONVersion}.zip webapp/dist/*"
                    
                    // Upload the zip file to the repository
                    sh '''
                       set -e
                       echo "Uploading zip file..."
                       curl -v -u admin:admin123 --upload-file webapp/dist-${packageJSONVersion}.zip http://54.159.27.82:8081/repository/lms/
                    '''
                }
            }
        }
    }
}
