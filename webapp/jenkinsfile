pipeline {
    agent any

    environment {
        repositoryURL = "http://54.172.190.173:8081/repository/lms/"
        artifactFileName = "dist-0.0.0.zip" // Update with the correct artifact filename
        downloadDirectory = "/tmp"
        deploymentLocation = "/opt/lms" // Update with the deployment location
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build LMS') {
            steps {
                echo 'Building LMS...'
                sh '''
                    cd webapp
                    npm install
                    npm run build
                '''
            }
        }

        stage('Publish Artifacts') {
            steps {
                script {
                    echo "Publishing artifacts"

                    // Read the version from package.json
                    def packageJSON = readJSON file: 'webapp/package.json'
                    def packageJSONVersion = packageJSON.version

                    // Create a zip file of the dist directory
                    def zipFileName = "dist-${packageJSONVersion}.zip"
                    sh "zip -r ${zipFileName} webapp/dist/*"

                    // Upload the zip file to the repository
                    withCredentials([usernamePassword(credentialsId: 'repo-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "curl -v -u ${USERNAME}:${PASSWORD} --upload-file ${zipFileName} ${repositoryURL}${zipFileName}"
                    }
                }
            }
        }

        stage('Download Artifact') {
            steps {
                echo 'Downloading artifact...'
                withCredentials([usernamePassword(credentialsId: 'repo-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "wget --user=${USERNAME} --password=${PASSWORD} ${repositoryURL}${artifactFileName} -P ${downloadDirectory}"
                }
            }
        }

        stage('Deploy LMS') {
            steps {
                echo 'Deploying LMS...'
                sh "ls -l ${downloadDirectory}/${artifactFileName}" // Verify artifact existence
                sh "unzip -o ${downloadDirectory}/${artifactFileName} -d ${deploymentLocation}"
                sh "${deploymentLocation}/start.sh" // Assuming start.sh script exists for starting the LMS
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
